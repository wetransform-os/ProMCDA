# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UniformIndicatorValues(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, min: float=None, max: float=None):  # noqa: E501
        """UniformIndicatorValues - a model defined in Swagger

        :param min: The min of this UniformIndicatorValues.  # noqa: E501
        :type min: float
        :param max: The max of this UniformIndicatorValues.  # noqa: E501
        :type max: float
        """
        self.swagger_types = {
            'min': float,
            'max': float
        }

        self.attribute_map = {
            'min': 'min',
            'max': 'max'
        }
        self._min = min
        self._max = max

    @classmethod
    def from_dict(cls, dikt) -> 'UniformIndicatorValues':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UniformIndicatorValues of this UniformIndicatorValues.  # noqa: E501
        :rtype: UniformIndicatorValues
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min(self) -> float:
        """Gets the min of this UniformIndicatorValues.

        The minimum value of the uniform distribution of the indicator estimated for a specific alternative.  # noqa: E501

        :return: The min of this UniformIndicatorValues.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min: float):
        """Sets the min of this UniformIndicatorValues.

        The minimum value of the uniform distribution of the indicator estimated for a specific alternative.  # noqa: E501

        :param min: The min of this UniformIndicatorValues.
        :type min: float
        """
        if min is None:
            raise ValueError("Invalid value for `min`, must not be `None`")  # noqa: E501

        self._min = min

    @property
    def max(self) -> float:
        """Gets the max of this UniformIndicatorValues.

        The maximum value of the uniform distribution of the indicator estimated for a specific alternative.  # noqa: E501

        :return: The max of this UniformIndicatorValues.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max: float):
        """Sets the max of this UniformIndicatorValues.

        The maximum value of the uniform distribution of the indicator estimated for a specific alternative.  # noqa: E501

        :param max: The max of this UniformIndicatorValues.
        :type max: float
        """
        if max is None:
            raise ValueError("Invalid value for `max`, must not be `None`")  # noqa: E501

        self._max = max
