# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SimpleMCDA(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, raw_scores: Dict[str, float]=None, normalized_scores: Dict[str, float]=None, ranks: Dict[str, float]=None):  # noqa: E501
        """SimpleMCDA - a model defined in Swagger

        :param raw_scores: The raw_scores of this SimpleMCDA.  # noqa: E501
        :type raw_scores: Dict[str, float]
        :param normalized_scores: The normalized_scores of this SimpleMCDA.  # noqa: E501
        :type normalized_scores: Dict[str, float]
        :param ranks: The ranks of this SimpleMCDA.  # noqa: E501
        :type ranks: Dict[str, float]
        """
        self.swagger_types = {
            'raw_scores': Dict[str, float],
            'normalized_scores': Dict[str, float],
            'ranks': Dict[str, float]
        }

        self.attribute_map = {
            'raw_scores': 'rawScores',
            'normalized_scores': 'normalizedScores',
            'ranks': 'ranks'
        }
        self._raw_scores = raw_scores
        self._normalized_scores = normalized_scores
        self._ranks = ranks

    @classmethod
    def from_dict(cls, dikt) -> 'SimpleMCDA':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SimpleMCDA of this SimpleMCDA.  # noqa: E501
        :rtype: SimpleMCDA
        """
        return util.deserialize_model(dikt, cls)

    @property
    def raw_scores(self) -> Dict[str, float]:
        """Gets the raw_scores of this SimpleMCDA.

        The scores generated via MCDA and linked to the alternatives.  # noqa: E501

        :return: The raw_scores of this SimpleMCDA.
        :rtype: Dict[str, float]
        """
        return self._raw_scores

    @raw_scores.setter
    def raw_scores(self, raw_scores: Dict[str, float]):
        """Sets the raw_scores of this SimpleMCDA.

        The scores generated via MCDA and linked to the alternatives.  # noqa: E501

        :param raw_scores: The raw_scores of this SimpleMCDA.
        :type raw_scores: Dict[str, float]
        """
        if raw_scores is None:
            raise ValueError("Invalid value for `raw_scores`, must not be `None`")  # noqa: E501

        self._raw_scores = raw_scores

    @property
    def normalized_scores(self) -> Dict[str, float]:
        """Gets the normalized_scores of this SimpleMCDA.

        The scores generated via MCDA and linked to the alternatives normalized between 0 and 1.  # noqa: E501

        :return: The normalized_scores of this SimpleMCDA.
        :rtype: Dict[str, float]
        """
        return self._normalized_scores

    @normalized_scores.setter
    def normalized_scores(self, normalized_scores: Dict[str, float]):
        """Sets the normalized_scores of this SimpleMCDA.

        The scores generated via MCDA and linked to the alternatives normalized between 0 and 1.  # noqa: E501

        :param normalized_scores: The normalized_scores of this SimpleMCDA.
        :type normalized_scores: Dict[str, float]
        """
        if normalized_scores is None:
            raise ValueError("Invalid value for `normalized_scores`, must not be `None`")  # noqa: E501

        self._normalized_scores = normalized_scores

    @property
    def ranks(self) -> Dict[str, float]:
        """Gets the ranks of this SimpleMCDA.

        The ranks generated via MCDA and linked to the alternatives.  # noqa: E501

        :return: The ranks of this SimpleMCDA.
        :rtype: Dict[str, float]
        """
        return self._ranks

    @ranks.setter
    def ranks(self, ranks: Dict[str, float]):
        """Sets the ranks of this SimpleMCDA.

        The ranks generated via MCDA and linked to the alternatives.  # noqa: E501

        :param ranks: The ranks of this SimpleMCDA.
        :type ranks: Dict[str, float]
        """
        if ranks is None:
            raise ValueError("Invalid value for `ranks`, must not be `None`")  # noqa: E501

        self._ranks = ranks
