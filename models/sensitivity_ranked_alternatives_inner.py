# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SensitivityRankedAlternativesInner(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ws_minmax: float=None, ws_target: float=None, ws_standardized_any: float=None, ws_rank: float=None, geom_minmax: float=None, geom_target: float=None, geom_standardized: float=None, geom_rank: float=None, harm_minmax: float=None, harm_target: float=None, harm_standardized: float=None, harm_rank: float=None, min_standardized_any: float=None):  # noqa: E501
        """SensitivityRankedAlternativesInner - a model defined in Swagger

        :param ws_minmax: The ws_minmax of this SensitivityRankedAlternativesInner.  # noqa: E501
        :type ws_minmax: float
        :param ws_target: The ws_target of this SensitivityRankedAlternativesInner.  # noqa: E501
        :type ws_target: float
        :param ws_standardized_any: The ws_standardized_any of this SensitivityRankedAlternativesInner.  # noqa: E501
        :type ws_standardized_any: float
        :param ws_rank: The ws_rank of this SensitivityRankedAlternativesInner.  # noqa: E501
        :type ws_rank: float
        :param geom_minmax: The geom_minmax of this SensitivityRankedAlternativesInner.  # noqa: E501
        :type geom_minmax: float
        :param geom_target: The geom_target of this SensitivityRankedAlternativesInner.  # noqa: E501
        :type geom_target: float
        :param geom_standardized: The geom_standardized of this SensitivityRankedAlternativesInner.  # noqa: E501
        :type geom_standardized: float
        :param geom_rank: The geom_rank of this SensitivityRankedAlternativesInner.  # noqa: E501
        :type geom_rank: float
        :param harm_minmax: The harm_minmax of this SensitivityRankedAlternativesInner.  # noqa: E501
        :type harm_minmax: float
        :param harm_target: The harm_target of this SensitivityRankedAlternativesInner.  # noqa: E501
        :type harm_target: float
        :param harm_standardized: The harm_standardized of this SensitivityRankedAlternativesInner.  # noqa: E501
        :type harm_standardized: float
        :param harm_rank: The harm_rank of this SensitivityRankedAlternativesInner.  # noqa: E501
        :type harm_rank: float
        :param min_standardized_any: The min_standardized_any of this SensitivityRankedAlternativesInner.  # noqa: E501
        :type min_standardized_any: float
        """
        self.swagger_types = {
            'ws_minmax': float,
            'ws_target': float,
            'ws_standardized_any': float,
            'ws_rank': float,
            'geom_minmax': float,
            'geom_target': float,
            'geom_standardized': float,
            'geom_rank': float,
            'harm_minmax': float,
            'harm_target': float,
            'harm_standardized': float,
            'harm_rank': float,
            'min_standardized_any': float
        }

        self.attribute_map = {
            'ws_minmax': 'wsMinmax',
            'ws_target': 'wsTarget',
            'ws_standardized_any': 'wsStandardizedAny',
            'ws_rank': 'wsRank',
            'geom_minmax': 'geomMinmax',
            'geom_target': 'geomTarget',
            'geom_standardized': 'geomStandardized',
            'geom_rank': 'geomRank',
            'harm_minmax': 'harmMinmax',
            'harm_target': 'harmTarget',
            'harm_standardized': 'harmStandardized',
            'harm_rank': 'harmRank',
            'min_standardized_any': 'minStandardizedAny'
        }
        self._ws_minmax = ws_minmax
        self._ws_target = ws_target
        self._ws_standardized_any = ws_standardized_any
        self._ws_rank = ws_rank
        self._geom_minmax = geom_minmax
        self._geom_target = geom_target
        self._geom_standardized = geom_standardized
        self._geom_rank = geom_rank
        self._harm_minmax = harm_minmax
        self._harm_target = harm_target
        self._harm_standardized = harm_standardized
        self._harm_rank = harm_rank
        self._min_standardized_any = min_standardized_any

    @classmethod
    def from_dict(cls, dikt) -> 'SensitivityRankedAlternativesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SensitivityRankedAlternatives_inner of this SensitivityRankedAlternativesInner.  # noqa: E501
        :rtype: SensitivityRankedAlternativesInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ws_minmax(self) -> float:
        """Gets the ws_minmax of this SensitivityRankedAlternativesInner.

        Weighted-sum normalization is combined with Minmax aggregation function.  # noqa: E501

        :return: The ws_minmax of this SensitivityRankedAlternativesInner.
        :rtype: float
        """
        return self._ws_minmax

    @ws_minmax.setter
    def ws_minmax(self, ws_minmax: float):
        """Sets the ws_minmax of this SensitivityRankedAlternativesInner.

        Weighted-sum normalization is combined with Minmax aggregation function.  # noqa: E501

        :param ws_minmax: The ws_minmax of this SensitivityRankedAlternativesInner.
        :type ws_minmax: float
        """
        if ws_minmax is None:
            raise ValueError("Invalid value for `ws_minmax`, must not be `None`")  # noqa: E501

        self._ws_minmax = ws_minmax

    @property
    def ws_target(self) -> float:
        """Gets the ws_target of this SensitivityRankedAlternativesInner.

        Weighted-sum normalization is combined with Target aggregation function.  # noqa: E501

        :return: The ws_target of this SensitivityRankedAlternativesInner.
        :rtype: float
        """
        return self._ws_target

    @ws_target.setter
    def ws_target(self, ws_target: float):
        """Sets the ws_target of this SensitivityRankedAlternativesInner.

        Weighted-sum normalization is combined with Target aggregation function.  # noqa: E501

        :param ws_target: The ws_target of this SensitivityRankedAlternativesInner.
        :type ws_target: float
        """
        if ws_target is None:
            raise ValueError("Invalid value for `ws_target`, must not be `None`")  # noqa: E501

        self._ws_target = ws_target

    @property
    def ws_standardized_any(self) -> float:
        """Gets the ws_standardized_any of this SensitivityRankedAlternativesInner.

        Weighted-sum normalization is combined with Standardized aggregation function.  # noqa: E501

        :return: The ws_standardized_any of this SensitivityRankedAlternativesInner.
        :rtype: float
        """
        return self._ws_standardized_any

    @ws_standardized_any.setter
    def ws_standardized_any(self, ws_standardized_any: float):
        """Sets the ws_standardized_any of this SensitivityRankedAlternativesInner.

        Weighted-sum normalization is combined with Standardized aggregation function.  # noqa: E501

        :param ws_standardized_any: The ws_standardized_any of this SensitivityRankedAlternativesInner.
        :type ws_standardized_any: float
        """
        if ws_standardized_any is None:
            raise ValueError("Invalid value for `ws_standardized_any`, must not be `None`")  # noqa: E501

        self._ws_standardized_any = ws_standardized_any

    @property
    def ws_rank(self) -> float:
        """Gets the ws_rank of this SensitivityRankedAlternativesInner.

        Weighted-sum normalization is combined with Rank aggregation function.  # noqa: E501

        :return: The ws_rank of this SensitivityRankedAlternativesInner.
        :rtype: float
        """
        return self._ws_rank

    @ws_rank.setter
    def ws_rank(self, ws_rank: float):
        """Sets the ws_rank of this SensitivityRankedAlternativesInner.

        Weighted-sum normalization is combined with Rank aggregation function.  # noqa: E501

        :param ws_rank: The ws_rank of this SensitivityRankedAlternativesInner.
        :type ws_rank: float
        """
        if ws_rank is None:
            raise ValueError("Invalid value for `ws_rank`, must not be `None`")  # noqa: E501

        self._ws_rank = ws_rank

    @property
    def geom_minmax(self) -> float:
        """Gets the geom_minmax of this SensitivityRankedAlternativesInner.

        Geometric normalization is combined with Minmax aggregation function.  # noqa: E501

        :return: The geom_minmax of this SensitivityRankedAlternativesInner.
        :rtype: float
        """
        return self._geom_minmax

    @geom_minmax.setter
    def geom_minmax(self, geom_minmax: float):
        """Sets the geom_minmax of this SensitivityRankedAlternativesInner.

        Geometric normalization is combined with Minmax aggregation function.  # noqa: E501

        :param geom_minmax: The geom_minmax of this SensitivityRankedAlternativesInner.
        :type geom_minmax: float
        """
        if geom_minmax is None:
            raise ValueError("Invalid value for `geom_minmax`, must not be `None`")  # noqa: E501

        self._geom_minmax = geom_minmax

    @property
    def geom_target(self) -> float:
        """Gets the geom_target of this SensitivityRankedAlternativesInner.

        Geometric normalization is combined with Target aggregation function.  # noqa: E501

        :return: The geom_target of this SensitivityRankedAlternativesInner.
        :rtype: float
        """
        return self._geom_target

    @geom_target.setter
    def geom_target(self, geom_target: float):
        """Sets the geom_target of this SensitivityRankedAlternativesInner.

        Geometric normalization is combined with Target aggregation function.  # noqa: E501

        :param geom_target: The geom_target of this SensitivityRankedAlternativesInner.
        :type geom_target: float
        """
        if geom_target is None:
            raise ValueError("Invalid value for `geom_target`, must not be `None`")  # noqa: E501

        self._geom_target = geom_target

    @property
    def geom_standardized(self) -> float:
        """Gets the geom_standardized of this SensitivityRankedAlternativesInner.

        Geometric normalization is combined with Standardized aggregation function.  # noqa: E501

        :return: The geom_standardized of this SensitivityRankedAlternativesInner.
        :rtype: float
        """
        return self._geom_standardized

    @geom_standardized.setter
    def geom_standardized(self, geom_standardized: float):
        """Sets the geom_standardized of this SensitivityRankedAlternativesInner.

        Geometric normalization is combined with Standardized aggregation function.  # noqa: E501

        :param geom_standardized: The geom_standardized of this SensitivityRankedAlternativesInner.
        :type geom_standardized: float
        """
        if geom_standardized is None:
            raise ValueError("Invalid value for `geom_standardized`, must not be `None`")  # noqa: E501

        self._geom_standardized = geom_standardized

    @property
    def geom_rank(self) -> float:
        """Gets the geom_rank of this SensitivityRankedAlternativesInner.

        Geometric normalization is combined with Rank aggregation function.  # noqa: E501

        :return: The geom_rank of this SensitivityRankedAlternativesInner.
        :rtype: float
        """
        return self._geom_rank

    @geom_rank.setter
    def geom_rank(self, geom_rank: float):
        """Sets the geom_rank of this SensitivityRankedAlternativesInner.

        Geometric normalization is combined with Rank aggregation function.  # noqa: E501

        :param geom_rank: The geom_rank of this SensitivityRankedAlternativesInner.
        :type geom_rank: float
        """
        if geom_rank is None:
            raise ValueError("Invalid value for `geom_rank`, must not be `None`")  # noqa: E501

        self._geom_rank = geom_rank

    @property
    def harm_minmax(self) -> float:
        """Gets the harm_minmax of this SensitivityRankedAlternativesInner.

        Harmonic normalization is combined with Minmax aggregation function.  # noqa: E501

        :return: The harm_minmax of this SensitivityRankedAlternativesInner.
        :rtype: float
        """
        return self._harm_minmax

    @harm_minmax.setter
    def harm_minmax(self, harm_minmax: float):
        """Sets the harm_minmax of this SensitivityRankedAlternativesInner.

        Harmonic normalization is combined with Minmax aggregation function.  # noqa: E501

        :param harm_minmax: The harm_minmax of this SensitivityRankedAlternativesInner.
        :type harm_minmax: float
        """
        if harm_minmax is None:
            raise ValueError("Invalid value for `harm_minmax`, must not be `None`")  # noqa: E501

        self._harm_minmax = harm_minmax

    @property
    def harm_target(self) -> float:
        """Gets the harm_target of this SensitivityRankedAlternativesInner.

        Harmonic normalization is combined with Target aggregation function.  # noqa: E501

        :return: The harm_target of this SensitivityRankedAlternativesInner.
        :rtype: float
        """
        return self._harm_target

    @harm_target.setter
    def harm_target(self, harm_target: float):
        """Sets the harm_target of this SensitivityRankedAlternativesInner.

        Harmonic normalization is combined with Target aggregation function.  # noqa: E501

        :param harm_target: The harm_target of this SensitivityRankedAlternativesInner.
        :type harm_target: float
        """
        if harm_target is None:
            raise ValueError("Invalid value for `harm_target`, must not be `None`")  # noqa: E501

        self._harm_target = harm_target

    @property
    def harm_standardized(self) -> float:
        """Gets the harm_standardized of this SensitivityRankedAlternativesInner.

        Harmonic normalization is combined with Standardized aggregation function.  # noqa: E501

        :return: The harm_standardized of this SensitivityRankedAlternativesInner.
        :rtype: float
        """
        return self._harm_standardized

    @harm_standardized.setter
    def harm_standardized(self, harm_standardized: float):
        """Sets the harm_standardized of this SensitivityRankedAlternativesInner.

        Harmonic normalization is combined with Standardized aggregation function.  # noqa: E501

        :param harm_standardized: The harm_standardized of this SensitivityRankedAlternativesInner.
        :type harm_standardized: float
        """
        if harm_standardized is None:
            raise ValueError("Invalid value for `harm_standardized`, must not be `None`")  # noqa: E501

        self._harm_standardized = harm_standardized

    @property
    def harm_rank(self) -> float:
        """Gets the harm_rank of this SensitivityRankedAlternativesInner.

        Harmonic normalization is combined with Rank aggregation function.  # noqa: E501

        :return: The harm_rank of this SensitivityRankedAlternativesInner.
        :rtype: float
        """
        return self._harm_rank

    @harm_rank.setter
    def harm_rank(self, harm_rank: float):
        """Sets the harm_rank of this SensitivityRankedAlternativesInner.

        Harmonic normalization is combined with Rank aggregation function.  # noqa: E501

        :param harm_rank: The harm_rank of this SensitivityRankedAlternativesInner.
        :type harm_rank: float
        """
        if harm_rank is None:
            raise ValueError("Invalid value for `harm_rank`, must not be `None`")  # noqa: E501

        self._harm_rank = harm_rank

    @property
    def min_standardized_any(self) -> float:
        """Gets the min_standardized_any of this SensitivityRankedAlternativesInner.

        Minimum normalization is combined with Standardized aggregation function.  # noqa: E501

        :return: The min_standardized_any of this SensitivityRankedAlternativesInner.
        :rtype: float
        """
        return self._min_standardized_any

    @min_standardized_any.setter
    def min_standardized_any(self, min_standardized_any: float):
        """Sets the min_standardized_any of this SensitivityRankedAlternativesInner.

        Minimum normalization is combined with Standardized aggregation function.  # noqa: E501

        :param min_standardized_any: The min_standardized_any of this SensitivityRankedAlternativesInner.
        :type min_standardized_any: float
        """
        if min_standardized_any is None:
            raise ValueError("Invalid value for `min_standardized_any`, must not be `None`")  # noqa: E501

        self._min_standardized_any = min_standardized_any
