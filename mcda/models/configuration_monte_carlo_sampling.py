# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ProMCDA.mcda.models.base_model_ import Model
from ProMCDA.mcda import util


class ConfigurationMonteCarloSampling(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, monte_carlo_runs: int=None, marginal_distributions: List[str]=None):  # noqa: E501
        """ConfigurationMonteCarloSampling - a model defined in Swagger

        :param monte_carlo_runs: The monte_carlo_runs of this ConfigurationMonteCarloSampling.  # noqa: E501
        :type monte_carlo_runs: int
        :param marginal_distributions: The marginal_distributions of this ConfigurationMonteCarloSampling.  # noqa: E501
        :type marginal_distributions: List[str]
        """
        self.swagger_types = {
            'monte_carlo_runs': int,
            'marginal_distributions': List[str]
        }

        self.attribute_map = {
            'monte_carlo_runs': 'monteCarloRuns',
            'marginal_distributions': 'marginalDistributions'
        }
        self._monte_carlo_runs = monte_carlo_runs
        self._marginal_distributions = marginal_distributions

    @classmethod
    def from_dict(cls, dikt) -> 'ConfigurationMonteCarloSampling':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Configuration_monteCarloSampling of this ConfigurationMonteCarloSampling.  # noqa: E501
        :rtype: ConfigurationMonteCarloSampling
        """
        return util.deserialize_model(dikt, cls)

    @property
    def monte_carlo_runs(self) -> int:
        """Gets the monte_carlo_runs of this ConfigurationMonteCarloSampling.

        Number of Monte Carlo iterations.  # noqa: E501

        :return: The monte_carlo_runs of this ConfigurationMonteCarloSampling.
        :rtype: int
        """
        return self._monte_carlo_runs

    @monte_carlo_runs.setter
    def monte_carlo_runs(self, monte_carlo_runs: int):
        """Sets the monte_carlo_runs of this ConfigurationMonteCarloSampling.

        Number of Monte Carlo iterations.  # noqa: E501

        :param monte_carlo_runs: The monte_carlo_runs of this ConfigurationMonteCarloSampling.
        :type monte_carlo_runs: int
        """
        if monte_carlo_runs is None:
            raise ValueError("Invalid value for `monte_carlo_runs`, must not be `None`")  # noqa: E501

        self._monte_carlo_runs = monte_carlo_runs

    @property
    def marginal_distributions(self) -> List[str]:
        """Gets the marginal_distributions of this ConfigurationMonteCarloSampling.

        The marginal distributions describing the indicators.  # noqa: E501

        :return: The marginal_distributions of this ConfigurationMonteCarloSampling.
        :rtype: List[str]
        """
        return self._marginal_distributions

    @marginal_distributions.setter
    def marginal_distributions(self, marginal_distributions: List[str]):
        """Sets the marginal_distributions of this ConfigurationMonteCarloSampling.

        The marginal distributions describing the indicators.  # noqa: E501

        :param marginal_distributions: The marginal_distributions of this ConfigurationMonteCarloSampling.
        :type marginal_distributions: List[str]
        """
        allowed_values = ["normal", "lognormal", "exact", "poisson", "uniform"]  # noqa: E501
        if not set(marginal_distributions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `marginal_distributions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(marginal_distributions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._marginal_distributions = marginal_distributions
