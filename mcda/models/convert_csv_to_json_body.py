# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ProMCDA.mcda.models.base_model_ import Model
from ProMCDA.mcda import util


class ConvertCsvToJsonBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, file: str=None, column_names: str=None):  # noqa: E501
        """ConvertCsvToJsonBody - a model defined in Swagger

        :param file: The file of this ConvertCsvToJsonBody.  # noqa: E501
        :type file: str
        :param column_names: The column_names of this ConvertCsvToJsonBody.  # noqa: E501
        :type column_names: str
        """
        self.swagger_types = {
            'file': str,
            'column_names': str
        }

        self.attribute_map = {
            'file': 'file',
            'column_names': 'columnNames'
        }
        self._file = file
        self._column_names = column_names

    @classmethod
    def from_dict(cls, dikt) -> 'ConvertCsvToJsonBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The convertCsvToJson_body of this ConvertCsvToJsonBody.  # noqa: E501
        :rtype: ConvertCsvToJsonBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file(self) -> str:
        """Gets the file of this ConvertCsvToJsonBody.

        The file to upload  # noqa: E501

        :return: The file of this ConvertCsvToJsonBody.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file: str):
        """Sets the file of this ConvertCsvToJsonBody.

        The file to upload  # noqa: E501

        :param file: The file of this ConvertCsvToJsonBody.
        :type file: str
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def column_names(self) -> str:
        """Gets the column_names of this ConvertCsvToJsonBody.

        A list of ordered comma separated column names to send with the file  # noqa: E501

        :return: The column_names of this ConvertCsvToJsonBody.
        :rtype: str
        """
        return self._column_names

    @column_names.setter
    def column_names(self, column_names: str):
        """Sets the column_names of this ConvertCsvToJsonBody.

        A list of ordered comma separated column names to send with the file  # noqa: E501

        :param column_names: The column_names of this ConvertCsvToJsonBody.
        :type column_names: str
        """
        if column_names is None:
            raise ValueError("Invalid value for `column_names`, must not be `None`")  # noqa: E501

        self._column_names = column_names
