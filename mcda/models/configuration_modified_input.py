# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ProMCDA.mcda.models.base_model_ import Model
from ProMCDA.mcda.models.configuration_modified_input_monte_carlo_sampling import ConfigurationModifiedInputMonteCarloSampling  # noqa: F401,E501
from ProMCDA.mcda.models.configuration_modified_input_robustness import ConfigurationModifiedInputRobustness  # noqa: F401,E501
from ProMCDA.mcda.models.configuration_modified_input_sensitivity import ConfigurationModifiedInputSensitivity  # noqa: F401,E501
from ProMCDA.mcda import util


class ConfigurationModifiedInput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, input_matrix: Dict[str, Dict[str, float]]=None, weights: List[float]=None, polarity: List[str]=None, sensitivity: ConfigurationModifiedInputSensitivity=None, robustness: ConfigurationModifiedInputRobustness=None, monte_carlo_sampling: ConfigurationModifiedInputMonteCarloSampling=None):  # noqa: E501
        """ConfigurationModifiedInput - a model defined in Swagger

        :param input_matrix: The input_matrix of this ConfigurationModifiedInput.  # noqa: E501
        :type input_matrix: Dict[str, Dict[str, float]]
        :param weights: The weights of this ConfigurationModifiedInput.  # noqa: E501
        :type weights: List[float]
        :param polarity: The polarity of this ConfigurationModifiedInput.  # noqa: E501
        :type polarity: List[str]
        :param sensitivity: The sensitivity of this ConfigurationModifiedInput.  # noqa: E501
        :type sensitivity: ConfigurationModifiedInputSensitivity
        :param robustness: The robustness of this ConfigurationModifiedInput.  # noqa: E501
        :type robustness: ConfigurationModifiedInputRobustness
        :param monte_carlo_sampling: The monte_carlo_sampling of this ConfigurationModifiedInput.  # noqa: E501
        :type monte_carlo_sampling: ConfigurationModifiedInputMonteCarloSampling
        """
        self.swagger_types = {
            'input_matrix': Dict[str, Dict[str, float]],
            'weights': List[float],
            'polarity': List[str],
            'sensitivity': ConfigurationModifiedInputSensitivity,
            'robustness': ConfigurationModifiedInputRobustness,
            'monte_carlo_sampling': ConfigurationModifiedInputMonteCarloSampling
        }

        self.attribute_map = {
            'input_matrix': 'inputMatrix',
            'weights': 'weights',
            'polarity': 'polarity',
            'sensitivity': 'sensitivity',
            'robustness': 'robustness',
            'monte_carlo_sampling': 'monteCarloSampling'
        }
        self._input_matrix = input_matrix
        self._weights = weights
        self._polarity = polarity
        self._sensitivity = sensitivity
        self._robustness = robustness
        self._monte_carlo_sampling = monte_carlo_sampling

    @classmethod
    def from_dict(cls, dikt) -> 'ConfigurationModifiedInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConfigurationModifiedInput of this ConfigurationModifiedInput.  # noqa: E501
        :rtype: ConfigurationModifiedInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_matrix(self) -> Dict[str, Dict[str, float]]:
        """Gets the input_matrix of this ConfigurationModifiedInput.

        An array where the columns represent the indicators and the rows their values for different alternatives.  # noqa: E501

        :return: The input_matrix of this ConfigurationModifiedInput.
        :rtype: Dict[str, Dict[str, float]]
        """
        return self._input_matrix

    @input_matrix.setter
    def input_matrix(self, input_matrix: Dict[str, Dict[str, float]]):
        """Sets the input_matrix of this ConfigurationModifiedInput.

        An array where the columns represent the indicators and the rows their values for different alternatives.  # noqa: E501

        :param input_matrix: The input_matrix of this ConfigurationModifiedInput.
        :type input_matrix: Dict[str, Dict[str, float]]
        """
        if input_matrix is None:
            raise ValueError("Invalid value for `input_matrix`, must not be `None`")  # noqa: E501

        self._input_matrix = input_matrix

    @property
    def weights(self) -> List[float]:
        """Gets the weights of this ConfigurationModifiedInput.

        The weights associated to the indicators.  # noqa: E501

        :return: The weights of this ConfigurationModifiedInput.
        :rtype: List[float]
        """
        return self._weights

    @weights.setter
    def weights(self, weights: List[float]):
        """Sets the weights of this ConfigurationModifiedInput.

        The weights associated to the indicators.  # noqa: E501

        :param weights: The weights of this ConfigurationModifiedInput.
        :type weights: List[float]
        """
        if weights is None:
            raise ValueError("Invalid value for `weights`, must not be `None`")  # noqa: E501

        self._weights = weights

    @property
    def polarity(self) -> List[str]:
        """Gets the polarity of this ConfigurationModifiedInput.

        The polarity of an indicator indicates whether its rising value adds positively or negatively to the MCDA scores.  # noqa: E501

        :return: The polarity of this ConfigurationModifiedInput.
        :rtype: List[str]
        """
        return self._polarity

    @polarity.setter
    def polarity(self, polarity: List[str]):
        """Sets the polarity of this ConfigurationModifiedInput.

        The polarity of an indicator indicates whether its rising value adds positively or negatively to the MCDA scores.  # noqa: E501

        :param polarity: The polarity of this ConfigurationModifiedInput.
        :type polarity: List[str]
        """
        allowed_values = ["+", "-"]  # noqa: E501
        if not set(polarity).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `polarity` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(polarity) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._polarity = polarity

    @property
    def sensitivity(self) -> ConfigurationModifiedInputSensitivity:
        """Gets the sensitivity of this ConfigurationModifiedInput.


        :return: The sensitivity of this ConfigurationModifiedInput.
        :rtype: ConfigurationModifiedInputSensitivity
        """
        return self._sensitivity

    @sensitivity.setter
    def sensitivity(self, sensitivity: ConfigurationModifiedInputSensitivity):
        """Sets the sensitivity of this ConfigurationModifiedInput.


        :param sensitivity: The sensitivity of this ConfigurationModifiedInput.
        :type sensitivity: ConfigurationModifiedInputSensitivity
        """
        if sensitivity is None:
            raise ValueError("Invalid value for `sensitivity`, must not be `None`")  # noqa: E501

        self._sensitivity = sensitivity

    @property
    def robustness(self) -> ConfigurationModifiedInputRobustness:
        """Gets the robustness of this ConfigurationModifiedInput.


        :return: The robustness of this ConfigurationModifiedInput.
        :rtype: ConfigurationModifiedInputRobustness
        """
        return self._robustness

    @robustness.setter
    def robustness(self, robustness: ConfigurationModifiedInputRobustness):
        """Sets the robustness of this ConfigurationModifiedInput.


        :param robustness: The robustness of this ConfigurationModifiedInput.
        :type robustness: ConfigurationModifiedInputRobustness
        """
        if robustness is None:
            raise ValueError("Invalid value for `robustness`, must not be `None`")  # noqa: E501

        self._robustness = robustness

    @property
    def monte_carlo_sampling(self) -> ConfigurationModifiedInputMonteCarloSampling:
        """Gets the monte_carlo_sampling of this ConfigurationModifiedInput.


        :return: The monte_carlo_sampling of this ConfigurationModifiedInput.
        :rtype: ConfigurationModifiedInputMonteCarloSampling
        """
        return self._monte_carlo_sampling

    @monte_carlo_sampling.setter
    def monte_carlo_sampling(self, monte_carlo_sampling: ConfigurationModifiedInputMonteCarloSampling):
        """Sets the monte_carlo_sampling of this ConfigurationModifiedInput.


        :param monte_carlo_sampling: The monte_carlo_sampling of this ConfigurationModifiedInput.
        :type monte_carlo_sampling: ConfigurationModifiedInputMonteCarloSampling
        """
        if monte_carlo_sampling is None:
            raise ValueError("Invalid value for `monte_carlo_sampling`, must not be `None`")  # noqa: E501

        self._monte_carlo_sampling = monte_carlo_sampling
