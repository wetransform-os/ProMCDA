# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ProMCDA.mcda.models.base_model_ import Model
from ProMCDA.mcda import util


class LogNormalIndicatorValues(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, avg: float=None, std: float=None):  # noqa: E501
        """LogNormalIndicatorValues - a model defined in Swagger

        :param avg: The avg of this LogNormalIndicatorValues.  # noqa: E501
        :type avg: float
        :param std: The std of this LogNormalIndicatorValues.  # noqa: E501
        :type std: float
        """
        self.swagger_types = {
            'avg': float,
            'std': float
        }

        self.attribute_map = {
            'avg': 'avg',
            'std': 'std'
        }
        self._avg = avg
        self._std = std

    @classmethod
    def from_dict(cls, dikt) -> 'LogNormalIndicatorValues':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LogNormalIndicatorValues of this LogNormalIndicatorValues.  # noqa: E501
        :rtype: LogNormalIndicatorValues
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avg(self) -> float:
        """Gets the avg of this LogNormalIndicatorValues.

        Logarithm of the average value of the indicator estimated for a specific alternative.  # noqa: E501

        :return: The avg of this LogNormalIndicatorValues.
        :rtype: float
        """
        return self._avg

    @avg.setter
    def avg(self, avg: float):
        """Sets the avg of this LogNormalIndicatorValues.

        Logarithm of the average value of the indicator estimated for a specific alternative.  # noqa: E501

        :param avg: The avg of this LogNormalIndicatorValues.
        :type avg: float
        """
        if avg is None:
            raise ValueError("Invalid value for `avg`, must not be `None`")  # noqa: E501

        self._avg = avg

    @property
    def std(self) -> float:
        """Gets the std of this LogNormalIndicatorValues.

        Logarithm of the standard deviation value of the indicator estimated for a specific alternative.  # noqa: E501

        :return: The std of this LogNormalIndicatorValues.
        :rtype: float
        """
        return self._std

    @std.setter
    def std(self, std: float):
        """Sets the std of this LogNormalIndicatorValues.

        Logarithm of the standard deviation value of the indicator estimated for a specific alternative.  # noqa: E501

        :param std: The std of this LogNormalIndicatorValues.
        :type std: float
        """
        if std is None:
            raise ValueError("Invalid value for `std`, must not be `None`")  # noqa: E501

        self._std = std
