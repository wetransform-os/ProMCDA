# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ProMCDA.mcda.models.base_model_ import Model
from ProMCDA.mcda import util


class InlineResponse200(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, input_matrix: Dict[str, Dict[str, float]]=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger

        :param input_matrix: The input_matrix of this InlineResponse200.  # noqa: E501
        :type input_matrix: Dict[str, Dict[str, float]]
        """
        self.swagger_types = {
            'input_matrix': Dict[str, Dict[str, float]]
        }

        self.attribute_map = {
            'input_matrix': 'inputMatrix'
        }
        self._input_matrix = input_matrix

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse200':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200 of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_matrix(self) -> Dict[str, Dict[str, float]]:
        """Gets the input_matrix of this InlineResponse200.

        An array where the columns represent the indicators and the rows their values for different alternatives.  # noqa: E501

        :return: The input_matrix of this InlineResponse200.
        :rtype: Dict[str, Dict[str, float]]
        """
        return self._input_matrix

    @input_matrix.setter
    def input_matrix(self, input_matrix: Dict[str, Dict[str, float]]):
        """Sets the input_matrix of this InlineResponse200.

        An array where the columns represent the indicators and the rows their values for different alternatives.  # noqa: E501

        :param input_matrix: The input_matrix of this InlineResponse200.
        :type input_matrix: Dict[str, Dict[str, float]]
        """

        self._input_matrix = input_matrix
