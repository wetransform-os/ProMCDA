# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ProMCDA.mcda.models.base_model_ import Model
from ProMCDA.mcda import util


class ConfigurationSensitivity(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, sensitivity_on: str=None, normalization: str=None, aggregation: str=None):  # noqa: E501
        """ConfigurationSensitivity - a model defined in Swagger

        :param sensitivity_on: The sensitivity_on of this ConfigurationSensitivity.  # noqa: E501
        :type sensitivity_on: str
        :param normalization: The normalization of this ConfigurationSensitivity.  # noqa: E501
        :type normalization: str
        :param aggregation: The aggregation of this ConfigurationSensitivity.  # noqa: E501
        :type aggregation: str
        """
        self.swagger_types = {
            'sensitivity_on': str,
            'normalization': str,
            'aggregation': str
        }

        self.attribute_map = {
            'sensitivity_on': 'sensitivityOn',
            'normalization': 'normalization',
            'aggregation': 'aggregation'
        }
        self._sensitivity_on = sensitivity_on
        self._normalization = normalization
        self._aggregation = aggregation

    @classmethod
    def from_dict(cls, dikt) -> 'ConfigurationSensitivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Configuration_sensitivity of this ConfigurationSensitivity.  # noqa: E501
        :rtype: ConfigurationSensitivity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sensitivity_on(self) -> str:
        """Gets the sensitivity_on of this ConfigurationSensitivity.

        A sensitivity analysis is performed ['yes'] or not ['no'].  # noqa: E501

        :return: The sensitivity_on of this ConfigurationSensitivity.
        :rtype: str
        """
        return self._sensitivity_on

    @sensitivity_on.setter
    def sensitivity_on(self, sensitivity_on: str):
        """Sets the sensitivity_on of this ConfigurationSensitivity.

        A sensitivity analysis is performed ['yes'] or not ['no'].  # noqa: E501

        :param sensitivity_on: The sensitivity_on of this ConfigurationSensitivity.
        :type sensitivity_on: str
        """
        allowed_values = ["yes", "no"]  # noqa: E501
        if sensitivity_on not in allowed_values:
            raise ValueError(
                "Invalid value for `sensitivity_on` ({0}), must be one of {1}"
                .format(sensitivity_on, allowed_values)
            )

        self._sensitivity_on = sensitivity_on

    @property
    def normalization(self) -> str:
        """Gets the normalization of this ConfigurationSensitivity.

        The function used for normalizing the indicator values.  # noqa: E501

        :return: The normalization of this ConfigurationSensitivity.
        :rtype: str
        """
        return self._normalization

    @normalization.setter
    def normalization(self, normalization: str):
        """Sets the normalization of this ConfigurationSensitivity.

        The function used for normalizing the indicator values.  # noqa: E501

        :param normalization: The normalization of this ConfigurationSensitivity.
        :type normalization: str
        """
        allowed_values = ["minmax", "standardized", "target", "rank"]  # noqa: E501
        if normalization not in allowed_values:
            raise ValueError(
                "Invalid value for `normalization` ({0}), must be one of {1}"
                .format(normalization, allowed_values)
            )

        self._normalization = normalization

    @property
    def aggregation(self) -> str:
        """Gets the aggregation of this ConfigurationSensitivity.

        The function used for aggregating the indicator values.  # noqa: E501

        :return: The aggregation of this ConfigurationSensitivity.
        :rtype: str
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation: str):
        """Sets the aggregation of this ConfigurationSensitivity.

        The function used for aggregating the indicator values.  # noqa: E501

        :param aggregation: The aggregation of this ConfigurationSensitivity.
        :type aggregation: str
        """
        allowed_values = ["weighted_sum", "geometric", "harmonic", "minimum"]  # noqa: E501
        if aggregation not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation` ({0}), must be one of {1}"
                .format(aggregation, allowed_values)
            )

        self._aggregation = aggregation
