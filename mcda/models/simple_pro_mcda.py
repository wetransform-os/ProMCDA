# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ProMCDA.mcda.models.base_model_ import Model
from ProMCDA.mcda import util


class SimpleProMCDA(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, raw_scores_averages: Dict[str, float]=None, raw_scores_standard_deviations: Dict[str, float]=None, normalized_scores_averages: Dict[str, float]=None):  # noqa: E501
        """SimpleProMCDA - a model defined in Swagger

        :param raw_scores_averages: The raw_scores_averages of this SimpleProMCDA.  # noqa: E501
        :type raw_scores_averages: Dict[str, float]
        :param raw_scores_standard_deviations: The raw_scores_standard_deviations of this SimpleProMCDA.  # noqa: E501
        :type raw_scores_standard_deviations: Dict[str, float]
        :param normalized_scores_averages: The normalized_scores_averages of this SimpleProMCDA.  # noqa: E501
        :type normalized_scores_averages: Dict[str, float]
        """
        self.swagger_types = {
            'raw_scores_averages': Dict[str, float],
            'raw_scores_standard_deviations': Dict[str, float],
            'normalized_scores_averages': Dict[str, float]
        }

        self.attribute_map = {
            'raw_scores_averages': 'rawScoresAverages',
            'raw_scores_standard_deviations': 'rawScoresStandardDeviations',
            'normalized_scores_averages': 'normalizedScoresAverages'
        }
        self._raw_scores_averages = raw_scores_averages
        self._raw_scores_standard_deviations = raw_scores_standard_deviations
        self._normalized_scores_averages = normalized_scores_averages

    @classmethod
    def from_dict(cls, dikt) -> 'SimpleProMCDA':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SimpleProMCDA of this SimpleProMCDA.  # noqa: E501
        :rtype: SimpleProMCDA
        """
        return util.deserialize_model(dikt, cls)

    @property
    def raw_scores_averages(self) -> Dict[str, float]:
        """Gets the raw_scores_averages of this SimpleProMCDA.

        The averages of the scores generated via ProMCDA and linked to the alternatives.  # noqa: E501

        :return: The raw_scores_averages of this SimpleProMCDA.
        :rtype: Dict[str, float]
        """
        return self._raw_scores_averages

    @raw_scores_averages.setter
    def raw_scores_averages(self, raw_scores_averages: Dict[str, float]):
        """Sets the raw_scores_averages of this SimpleProMCDA.

        The averages of the scores generated via ProMCDA and linked to the alternatives.  # noqa: E501

        :param raw_scores_averages: The raw_scores_averages of this SimpleProMCDA.
        :type raw_scores_averages: Dict[str, float]
        """
        if raw_scores_averages is None:
            raise ValueError("Invalid value for `raw_scores_averages`, must not be `None`")  # noqa: E501

        self._raw_scores_averages = raw_scores_averages

    @property
    def raw_scores_standard_deviations(self) -> Dict[str, float]:
        """Gets the raw_scores_standard_deviations of this SimpleProMCDA.

        The standard devations generated via ProMCDA and linked to the alternatives.  # noqa: E501

        :return: The raw_scores_standard_deviations of this SimpleProMCDA.
        :rtype: Dict[str, float]
        """
        return self._raw_scores_standard_deviations

    @raw_scores_standard_deviations.setter
    def raw_scores_standard_deviations(self, raw_scores_standard_deviations: Dict[str, float]):
        """Sets the raw_scores_standard_deviations of this SimpleProMCDA.

        The standard devations generated via ProMCDA and linked to the alternatives.  # noqa: E501

        :param raw_scores_standard_deviations: The raw_scores_standard_deviations of this SimpleProMCDA.
        :type raw_scores_standard_deviations: Dict[str, float]
        """
        if raw_scores_standard_deviations is None:
            raise ValueError("Invalid value for `raw_scores_standard_deviations`, must not be `None`")  # noqa: E501

        self._raw_scores_standard_deviations = raw_scores_standard_deviations

    @property
    def normalized_scores_averages(self) -> Dict[str, float]:
        """Gets the normalized_scores_averages of this SimpleProMCDA.

        The averages of the scores generated via ProMCDA and linked to the alternatives normalized between 0 and 1.  # noqa: E501

        :return: The normalized_scores_averages of this SimpleProMCDA.
        :rtype: Dict[str, float]
        """
        return self._normalized_scores_averages

    @normalized_scores_averages.setter
    def normalized_scores_averages(self, normalized_scores_averages: Dict[str, float]):
        """Sets the normalized_scores_averages of this SimpleProMCDA.

        The averages of the scores generated via ProMCDA and linked to the alternatives normalized between 0 and 1.  # noqa: E501

        :param normalized_scores_averages: The normalized_scores_averages of this SimpleProMCDA.
        :type normalized_scores_averages: Dict[str, float]
        """
        if normalized_scores_averages is None:
            raise ValueError("Invalid value for `normalized_scores_averages`, must not be `None`")  # noqa: E501

        self._normalized_scores_averages = normalized_scores_averages
