# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ProMCDA.mcda.models.base_model_ import Model
from ProMCDA.mcda.models.sensitivity_ranked_alternatives import SensitivityRankedAlternatives  # noqa: F401,E501
from ProMCDA.mcda import util


class SensitivityMCDA(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, raw_scores: SensitivityRankedAlternatives=None, normalized_scores: SensitivityRankedAlternatives=None, ranks: SensitivityRankedAlternatives=None):  # noqa: E501
        """SensitivityMCDA - a model defined in Swagger

        :param name: The name of this SensitivityMCDA.  # noqa: E501
        :type name: str
        :param raw_scores: The raw_scores of this SensitivityMCDA.  # noqa: E501
        :type raw_scores: SensitivityRankedAlternatives
        :param normalized_scores: The normalized_scores of this SensitivityMCDA.  # noqa: E501
        :type normalized_scores: SensitivityRankedAlternatives
        :param ranks: The ranks of this SensitivityMCDA.  # noqa: E501
        :type ranks: SensitivityRankedAlternatives
        """
        self.swagger_types = {
            'name': str,
            'raw_scores': SensitivityRankedAlternatives,
            'normalized_scores': SensitivityRankedAlternatives,
            'ranks': SensitivityRankedAlternatives
        }

        self.attribute_map = {
            'name': 'name',
            'raw_scores': 'rawScores',
            'normalized_scores': 'normalizedScores',
            'ranks': 'ranks'
        }
        self._name = name
        self._raw_scores = raw_scores
        self._normalized_scores = normalized_scores
        self._ranks = ranks

    @classmethod
    def from_dict(cls, dikt) -> 'SensitivityMCDA':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SensitivityMCDA of this SensitivityMCDA.  # noqa: E501
        :rtype: SensitivityMCDA
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this SensitivityMCDA.

        The name of the alternatives.  # noqa: E501

        :return: The name of this SensitivityMCDA.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SensitivityMCDA.

        The name of the alternatives.  # noqa: E501

        :param name: The name of this SensitivityMCDA.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def raw_scores(self) -> SensitivityRankedAlternatives:
        """Gets the raw_scores of this SensitivityMCDA.


        :return: The raw_scores of this SensitivityMCDA.
        :rtype: SensitivityRankedAlternatives
        """
        return self._raw_scores

    @raw_scores.setter
    def raw_scores(self, raw_scores: SensitivityRankedAlternatives):
        """Sets the raw_scores of this SensitivityMCDA.


        :param raw_scores: The raw_scores of this SensitivityMCDA.
        :type raw_scores: SensitivityRankedAlternatives
        """
        if raw_scores is None:
            raise ValueError("Invalid value for `raw_scores`, must not be `None`")  # noqa: E501

        self._raw_scores = raw_scores

    @property
    def normalized_scores(self) -> SensitivityRankedAlternatives:
        """Gets the normalized_scores of this SensitivityMCDA.


        :return: The normalized_scores of this SensitivityMCDA.
        :rtype: SensitivityRankedAlternatives
        """
        return self._normalized_scores

    @normalized_scores.setter
    def normalized_scores(self, normalized_scores: SensitivityRankedAlternatives):
        """Sets the normalized_scores of this SensitivityMCDA.


        :param normalized_scores: The normalized_scores of this SensitivityMCDA.
        :type normalized_scores: SensitivityRankedAlternatives
        """
        if normalized_scores is None:
            raise ValueError("Invalid value for `normalized_scores`, must not be `None`")  # noqa: E501

        self._normalized_scores = normalized_scores

    @property
    def ranks(self) -> SensitivityRankedAlternatives:
        """Gets the ranks of this SensitivityMCDA.


        :return: The ranks of this SensitivityMCDA.
        :rtype: SensitivityRankedAlternatives
        """
        return self._ranks

    @ranks.setter
    def ranks(self, ranks: SensitivityRankedAlternatives):
        """Sets the ranks of this SensitivityMCDA.


        :param ranks: The ranks of this SensitivityMCDA.
        :type ranks: SensitivityRankedAlternatives
        """
        if ranks is None:
            raise ValueError("Invalid value for `ranks`, must not be `None`")  # noqa: E501

        self._ranks = ranks
